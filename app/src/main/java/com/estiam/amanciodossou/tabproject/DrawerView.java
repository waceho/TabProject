package com.estiam.amanciodossou.tabproject;import android.content.Context;import android.graphics.Bitmap;import android.graphics.Canvas;import android.graphics.Color;import android.graphics.Paint;import android.graphics.Path;import android.graphics.drawable.Drawable;import android.os.Parcel;import android.os.Parcelable;import android.util.AttributeSet;import android.view.MotionEvent;import android.view.View;import java.io.Serializable;/** * Created by amanciodossou on 02/02/2018. */public class DrawerView extends View implements Serializable{    private Paint mPaint;    private Path mPath;    private int stateToSave;    public DrawerView(Context context, AttributeSet attrs) {        super(context);        mPaint = new Paint();        mPaint.setColor(Color.RED);        mPaint.setStyle(Paint.Style.STROKE);        mPaint.setStrokeJoin(Paint.Join.ROUND);        mPaint.setStrokeCap(Paint.Cap.ROUND);        mPaint.setStrokeWidth(10);        mPath = new Path();    }    @Override    protected void onDraw(Canvas canvas) {        canvas.drawPath(mPath, mPaint);        super.onDraw(canvas);    }    @Override    public boolean onTouchEvent(MotionEvent event) {        switch (event.getAction()){            case MotionEvent.ACTION_DOWN:                mPath.moveTo(event.getX(), event.getY());                break;            case MotionEvent.ACTION_MOVE:                mPath.lineTo(event.getX(), event.getY());                invalidate();                break;            case MotionEvent.ACTION_UP:                break;        }        return true;    }    public Bitmap getBitmapFromView() {        View view = this;        //Define a bitmap with the same size as the view        Bitmap returnedBitmap = Bitmap.createBitmap(view.getWidth(), view.getHeight(),Bitmap.Config.ARGB_8888);        //Bind a canvas to it        Canvas canvas = new Canvas(returnedBitmap);        //Get the view's background        Drawable bgDrawable =view.getBackground();        if (bgDrawable!=null)            //has background drawable, then draw it on the canvas            bgDrawable.draw(canvas);        else            //does not have background drawable, then draw white background on the canvas            canvas.drawColor(Color.WHITE);        // draw the view on the canvas        view.draw(canvas);        //return the bitmap        return returnedBitmap;    }    @Override    public Parcelable onSaveInstanceState() {        //begin boilerplate code that allows parent classes to save state        Parcelable superState = super.onSaveInstanceState();        SavedState ss = new SavedState(superState);        //end        ss.stateToSave = this.stateToSave;        return ss;    }    @Override    public void onRestoreInstanceState(Parcelable state) {        //begin boilerplate code so parent classes can restore state        if(!(state instanceof SavedState)) {            super.onRestoreInstanceState(state);            return;        }        SavedState ss = (SavedState)state;        super.onRestoreInstanceState(ss.getSuperState());        //end        this.stateToSave = ss.stateToSave;    }    static class SavedState extends BaseSavedState {        int stateToSave;        SavedState(Parcelable superState) {            super(superState);        }        private SavedState(Parcel in) {            super(in);            this.stateToSave = in.readInt();        }        @Override        public void writeToParcel(Parcel out, int flags) {            super.writeToParcel(out, flags);            out.writeInt(this.stateToSave);        }        //required field that makes Parcelables from a Parcel        public static final Parcelable.Creator<SavedState> CREATOR =                new Parcelable.Creator<SavedState>() {                    public SavedState createFromParcel(Parcel in) {                        return new SavedState(in);                    }                    public SavedState[] newArray(int size) {                        return new SavedState[size];                    }                };    }}