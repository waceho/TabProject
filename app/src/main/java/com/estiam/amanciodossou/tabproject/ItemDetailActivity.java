package com.estiam.amanciodossou.tabproject;import android.content.Intent;import android.database.sqlite.SQLiteDatabase;import android.graphics.Bitmap;import android.graphics.Canvas;import android.graphics.Color;import android.graphics.Paint;import android.graphics.drawable.Drawable;import android.os.Bundle;import android.support.design.widget.FloatingActionButton;import android.support.design.widget.Snackbar;import android.support.v4.widget.NestedScrollView;import android.support.v7.widget.Toolbar;import android.util.Log;import android.view.View;import android.support.v7.app.AppCompatActivity;import android.support.v7.app.ActionBar;import android.view.MenuItem;import com.estiam.amanciodossou.tabproject.dummy.DatabaseDataWorker;import com.estiam.amanciodossou.tabproject.dummy.OpenHelper;import java.io.ByteArrayOutputStream;import java.io.Serializable;/** * An activity representing a single Item detail screen. This * activity is only used on narrow width devices. On tablet-size devices, * item details are presented side-by-side with a list of items * in a {@link ItemListActivity}. */public class ItemDetailActivity extends AppCompatActivity {    /**     * The fragment argument representing the item ID that this fragment     * represents.     */    public static final String ARG_ITEM_ID = "item_id";    DrawerView myObject;    private Bundle savedState = null;    private boolean createdStateInDestroyView;    private static final String SAVED_BUNDLE_TAG = "saved_bundle";    private OpenHelper mDbOpenHelper;    SQLiteDatabase db;    public DrawerView dv ;    private Paint mPaint;    private NestedScrollView vw;    @Override    protected void onCreate(Bundle savedInstanceState) {        super.onCreate(savedInstanceState);        setContentView(R.layout.activity_item_detail);        Toolbar toolbar = findViewById(R.id.detail_toolbar);        vw = (NestedScrollView)findViewById(R.id.item_detail_container);        setSupportActionBar(toolbar);        FloatingActionButton fab = findViewById(R.id.fab);        drawer();        mDbOpenHelper = new OpenHelper(this);         db = mDbOpenHelper.getWritableDatabase();        fab.setOnClickListener(new View.OnClickListener() {            @Override            public void onClick(View view) {                DatabaseDataWorker work = new DatabaseDataWorker(db, getBaseContext());                drawer();                work.inserImage(getBitmapFromView(vw));            }        });        // Show the Up button in the action bar.        ActionBar actionBar = getSupportActionBar();        if (actionBar != null) {            actionBar.setDisplayHomeAsUpEnabled(true);            actionBar.setTitle(getIntent().getStringExtra(ItemDetailFragment.ARG_ITEM_ID));        }        // savedInstanceState is non-null when there is fragment state        // saved from previous configurations of this activity        // (e.g. when rotating the screen from portrait to landscape).        // In this case, the fragment will automatically be re-added        // to its container so we don't need to manually add it.        // For more information, see the Fragments API guide at:        //        // http://developer.android.com/guide/components/fragments.html        //        if (savedInstanceState == null) {            // Create the detail fragment and add it to the activity            // using a fragment transaction.            Bundle arguments = new Bundle();            arguments.putString(ItemDetailFragment.ARG_ITEM_ID,                    getIntent().getStringExtra(ItemDetailFragment.ARG_ITEM_ID));            ItemDetailFragment fragment = new ItemDetailFragment();            fragment.setArguments(arguments);            drawer();            dv.invalidate();        }    }    @Override    public boolean onOptionsItemSelected(MenuItem item) {        int id = item.getItemId();        if (id == android.R.id.home) {            // This ID represents the Home or Up button. In the case of this            // activity, the Up button is shown. For            // more details, see the Navigation pattern on Android Design:            //            // http://developer.android.com/design/patterns/navigation.html#up-vs-back            //            navigateUpTo(new Intent(this, ItemListActivity.class));            return true;        }        return super.onOptionsItemSelected(item);    }    private void drawer(){        dv = new DrawerView(getBaseContext(), null);        mPaint = new Paint();        mPaint.setAntiAlias(true);        mPaint.setDither(true);        mPaint.setColor(Color.GREEN);        mPaint.setStyle(Paint.Style.STROKE);        mPaint.setStrokeJoin(Paint.Join.ROUND);        mPaint.setStrokeCap(Paint.Cap.ROUND);        mPaint.setStrokeWidth(12);    }    @Override    public void onSaveInstanceState(Bundle outState) {        if (myObject == null) {            outState.putBundle(SAVED_BUNDLE_TAG, savedState);        } else {            outState.putBundle(SAVED_BUNDLE_TAG, createdStateInDestroyView ? savedState : saveState());        }        createdStateInDestroyView = false;        super.onSaveInstanceState(outState);    }    private Bundle saveState() {        Bundle state = new Bundle();        state.putSerializable(SAVED_BUNDLE_TAG, (Serializable) findViewById(R.id.drawview).getRootView());        Log.d("myprevious", String.valueOf((Serializable)findViewById(R.id.drawview).getRootView()));        return state;    }    public static Bitmap getBitmapFromView(View view) {        //Define a bitmap with the same size as the view        Bitmap returnedBitmap = Bitmap.createBitmap(view.getWidth(), view.getHeight(),Bitmap.Config.ARGB_8888);        //Bind a canvas to it        Canvas canvas = new Canvas(returnedBitmap);        //Get the view's background        Drawable bgDrawable =view.getBackground();        if (bgDrawable!=null)            //has background drawable, then draw it on the canvas            bgDrawable.draw(canvas);        else            //does not have background drawable, then draw white background on the canvas            canvas.drawColor(Color.WHITE);        // draw the view on the canvas        view.draw(canvas);        //return the bitmap        return returnedBitmap;    }}