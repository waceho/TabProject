package com.estiam.amanciodossou.tabproject;import android.content.ContentValues;import android.content.Context;import android.content.DialogInterface;import android.content.Intent;import android.database.sqlite.SQLiteDatabase;import android.graphics.Color;import android.graphics.Paint;import android.os.Bundle;import android.support.annotation.NonNull;import android.support.v7.app.AlertDialog;import android.support.v7.app.AppCompatActivity;import android.support.v7.widget.GridLayoutManager;import android.support.v7.widget.LinearLayoutManager;import android.support.v7.widget.RecyclerView;import android.support.v7.widget.Toolbar;import android.support.design.widget.FloatingActionButton;import android.support.design.widget.Snackbar;import android.view.LayoutInflater;import android.view.View;import android.view.ViewGroup;import android.widget.EditText;import android.widget.TextView;import com.estiam.amanciodossou.tabproject.dummy.DocumentInfo;import com.estiam.amanciodossou.tabproject.dummy.DocumentRecyclerAdapter;import com.estiam.amanciodossou.tabproject.dummy.DataManager;import com.estiam.amanciodossou.tabproject.dummy.DummyContent;import com.estiam.amanciodossou.tabproject.dummy.NoteKeeperDatabaseContract;import com.estiam.amanciodossou.tabproject.dummy.NoteKeeperOpenHelper;import com.estiam.amanciodossou.tabproject.dummy.NoteRecyclerAdapter;import org.json.JSONException;import java.util.List;/** * An activity representing a list of Items. This activity * has different presentations for handset and tablet-size devices. On * handsets, the activity presents a list of items, which when touched, * lead to a {@link ItemDetailActivity} representing * item details. On tablets, the activity presents the list of items and * item details side-by-side using two vertical panes. */public class ItemListActivity extends AppCompatActivity {    /**     * Whether or not the activity is in two-pane mode, i.e. running on a tablet     * device.     */    private boolean mTwoPane;    DrawerView dv ;    private Paint mPaint;    private GridLayoutManager mCoursesLayoutManager;    private NoteKeeperOpenHelper mDbOpenHelper;    private RecyclerView mRecyclerItems;    private LinearLayoutManager mNotesLayoutManager;    private DocumentRecyclerAdapter mDocumentRecyclerAdapter;    @Override    protected void onCreate(Bundle savedInstanceState) {        super.onCreate(savedInstanceState);        setContentView(R.layout.activity_item_list);        Toolbar toolbar = (Toolbar) findViewById(R.id.toolbar);        setSupportActionBar(toolbar);        toolbar.setTitle(getTitle());        FloatingActionButton fab = (FloatingActionButton) findViewById(R.id.fab);        fab.setOnClickListener(new View.OnClickListener() {            @Override            public void onClick(View view) {                try {                    newDocumentLayout();                } catch (JSONException e) {                    e.printStackTrace();                }            }        });        if (findViewById(R.id.item_detail_container) != null) {            // The detail container view will be present only in the            // large-screen layouts (res/values-w900dp).            // If this view is present, then the            // activity should be in two-pane mode.            mTwoPane = true;        }        mDbOpenHelper = new NoteKeeperOpenHelper(this);        View recyclerView = findViewById(R.id.item_list);        assert recyclerView != null;        setupRecyclerView((RecyclerView) recyclerView);    }    private void setupRecyclerView(@NonNull RecyclerView recyclerView) {        if (mTwoPane){            initializeSimpleDisplayContent(recyclerView);        }        else {            initializeDisplayContent(recyclerView);        }    }    private void drawer(){        dv = new DrawerView(this, null);        setContentView(dv);        mPaint = new Paint();        mPaint.setAntiAlias(true);        mPaint.setDither(true);        mPaint.setColor(Color.GREEN);        mPaint.setStyle(Paint.Style.STROKE);        mPaint.setStrokeJoin(Paint.Join.ROUND);        mPaint.setStrokeCap(Paint.Cap.ROUND);        mPaint.setStrokeWidth(12);    }    public static class SimpleItemRecyclerViewAdapter            extends RecyclerView.Adapter<SimpleItemRecyclerViewAdapter.ViewHolder> {        private final ItemListActivity mParentActivity;        private final List<DocumentInfo> mValues;        private final boolean mTwoPane;        private final View.OnClickListener mOnClickListener = new View.OnClickListener() {            @Override            public void onClick(View view) {                DocumentInfo item = (DocumentInfo) view.getTag();                if (mTwoPane) {                    Bundle arguments = new Bundle();                    arguments.putString(ItemDetailFragment.ARG_ITEM_ID, item.getTitle());                    ItemDetailFragment fragment = new ItemDetailFragment();                    fragment.setArguments(arguments);                    mParentActivity.getSupportFragmentManager().beginTransaction()                            .replace(R.id.item_detail_container, fragment)                            .commit();                } else {                    Context context = view.getContext();                    Intent intent = new Intent(context, ItemDetailActivity.class);                    intent.putExtra(ItemDetailFragment.ARG_ITEM_ID, item.getCourseId());                    context.startActivity(intent);                }            }        };        SimpleItemRecyclerViewAdapter(ItemListActivity parent,                                      List<DocumentInfo> items,                                      boolean twoPane) {            mValues = items;            mParentActivity = parent;            mTwoPane = twoPane;        }        @Override        public ViewHolder onCreateViewHolder(ViewGroup parent, int viewType) {            View view = LayoutInflater.from(parent.getContext())                    .inflate(R.layout.item_course_list, parent, false);            return new ViewHolder(view);        }        @Override        public void onBindViewHolder(final ViewHolder holder, int position) {            holder.mIdView.setText(mValues.get(position).getCourseId());            holder.mContentView.setText(mValues.get(position).getTitle());            holder.itemView.setTag(mValues.get(position));            holder.itemView.setOnClickListener(mOnClickListener);        }        @Override        public int getItemCount() {            return mValues.size();        }        class ViewHolder extends RecyclerView.ViewHolder {            final TextView mIdView;            final TextView mContentView;            ViewHolder(View view) {                super(view);                mIdView = (TextView) view.findViewById(R.id.id_text);                mContentView = (TextView) view.findViewById(R.id.content);            }        }    }    /**     * Alert dialog for Document name value     */    public void newDocumentLayout() throws JSONException {        AlertDialog.Builder builder = new AlertDialog.Builder(this);        // Get the layout inflater        LayoutInflater inflater = this.getLayoutInflater();        View view = inflater.inflate(R.layout.seteffi, null);        builder.setView(view);        // Add action buttons        // enter effi index value ...        final EditText docName = view.findViewById(R.id.docuName);        builder                .setPositiveButton("Valider", new DialogInterface.OnClickListener() {                    @Override                    public void onClick(DialogInterface dialog, int id) {                        final String name = docName.getText().toString();                        createNewNote("DOCUMENT9", name);                        Snackbar.make(getCurrentFocus(), "DOCOUMENT AJOUTER", Snackbar.LENGTH_SHORT).show();                        mDocumentRecyclerAdapter.notifyDataSetChanged();                       // initializeDisplayContent();                    }                })                .setNegativeButton("Annuler", new DialogInterface.OnClickListener() {                    public void onClick(DialogInterface dialog, int id) {                    }                });        builder.create();        builder.show();    }    private void createNewNote(String docId, String title) {        ContentValues values = new ContentValues();        values.put(NoteKeeperDatabaseContract.DocumentInfoEntry.COLUMN_COURSE_ID, docId);        values.put(NoteKeeperDatabaseContract.DocumentInfoEntry.COLUMN_COURSE_TITLE, title);        SQLiteDatabase db = mDbOpenHelper.getWritableDatabase();        long newRowId = db.insert(NoteKeeperDatabaseContract.DocumentInfoEntry.TABLE_NAME, null, values);    }    private void initializeSimpleDisplayContent(RecyclerView recyclerView) {        DataManager.loadFromDatabase(mDbOpenHelper);        List<DocumentInfo> courses = DataManager.getInstance().getCourses();        recyclerView.setAdapter(new SimpleItemRecyclerViewAdapter(this, courses, mTwoPane));        //displayCourses();    }    private void initializeDisplayContent(RecyclerView recyclerView) {        DataManager.loadFromDatabase(mDbOpenHelper);        mRecyclerItems = recyclerView;        mNotesLayoutManager = new LinearLayoutManager(this);        mCoursesLayoutManager = new GridLayoutManager(this,                getResources().getInteger(R.integer.course_grid_span));        //mNoteRecyclerAdapter = new NoteRecyclerAdapter(this, null);        List<DocumentInfo> courses = DataManager.getInstance().getCourses();        mDocumentRecyclerAdapter = new DocumentRecyclerAdapter(this, courses);        displayCourses();    }    private void displayCourses() {        mRecyclerItems.setLayoutManager(mCoursesLayoutManager);        mRecyclerItems.setAdapter(mDocumentRecyclerAdapter);    }}